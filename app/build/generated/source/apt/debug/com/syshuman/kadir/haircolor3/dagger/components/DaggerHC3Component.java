// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.syshuman.kadir.haircolor3.dagger.components;

import android.content.Context;
import android.content.SharedPreferences;
import com.syshuman.kadir.haircolor3.dagger.modules.ContextModule;
import com.syshuman.kadir.haircolor3.dagger.modules.ContextModule_ContextFactory;
import com.syshuman.kadir.haircolor3.dagger.modules.HC3Module;
import com.syshuman.kadir.haircolor3.dagger.modules.HC3Module_GetBluetoothLeUartFactory;
import com.syshuman.kadir.haircolor3.dagger.modules.HC3Module_GetRestServerFactory;
import com.syshuman.kadir.haircolor3.dagger.modules.HC3Module_GetSharedPreferencesFactory;
import com.syshuman.kadir.haircolor3.model.BluetoothLeUart;
import com.syshuman.kadir.haircolor3.model.RestServer;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerHC3Component implements HC3Component {
  private Provider<Context> contextProvider;

  private Provider<BluetoothLeUart> getBluetoothLeUartProvider;

  private Provider<RestServer> getRestServerProvider;

  private Provider<SharedPreferences> getSharedPreferencesProvider;

  private DaggerHC3Component(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.contextProvider = ContextModule_ContextFactory.create(builder.contextModule);

    this.getBluetoothLeUartProvider =
        HC3Module_GetBluetoothLeUartFactory.create(builder.hC3Module, contextProvider);

    this.getRestServerProvider =
        HC3Module_GetRestServerFactory.create(builder.hC3Module, contextProvider);

    this.getSharedPreferencesProvider =
        HC3Module_GetSharedPreferencesFactory.create(builder.hC3Module, contextProvider);
  }

  @Override
  public BluetoothLeUart getBluetoothLeUart() {
    return getBluetoothLeUartProvider.get();
  }

  @Override
  public RestServer getRestServer() {
    return getRestServerProvider.get();
  }

  @Override
  public SharedPreferences getSharedPreferences() {
    return getSharedPreferencesProvider.get();
  }

  public static final class Builder {
    private ContextModule contextModule;

    private HC3Module hC3Module;

    private Builder() {}

    public HC3Component build() {
      if (contextModule == null) {
        throw new IllegalStateException(ContextModule.class.getCanonicalName() + " must be set");
      }
      if (hC3Module == null) {
        this.hC3Module = new HC3Module();
      }
      return new DaggerHC3Component(this);
    }

    public Builder hC3Module(HC3Module hC3Module) {
      this.hC3Module = Preconditions.checkNotNull(hC3Module);
      return this;
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }
  }
}
